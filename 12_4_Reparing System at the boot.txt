Repairing File System Issues at Boot
====================================
The following table lists some common errors and their results::
-------------------------------------------------------------------------------------------------------------------------------------
Problem									Result
-------------------------------------------------------------------------------------------------------------------------------------
Corrupt file system---------------------------------->	systemd attempts to repair the file system. If the problem is too severe for an
						        automatic fix, the system drops the user to an emergency shell.
Nonexistent device or UUID referenced in /etc/fstab -->	systemd waits for a set amount of time, waiting for the device to become available							  If the device does not become available, the system drops the user to an emergency 							    shell after the timeout.
Nonexistent mount point in /etc/fstab----------------->	The system drops the user to an emergency shell.
Incorrect mount option specified in /etc/fstab-------->	The system drops the user to an emergency shell.

In all cases, administrators can also use the emergency target to diagnose and fix the issue, because no file systems are mounted before the emergency shell is displayed.

-----------------------------------
Kernel Monitoring and Configuration
===================================
The Red Hat Enterprise Linux kernel can be extended with optional, additional pieces of functionality, called kernel modules, without having to reboot the system. On Red Hat Enterprise Linux 8, kernel modules are extra kernel code which is built into compressed <KERNEL_MODULE_NAME>.ko.xz object files.

The most common functionality enabled by kernel modules are:

--> Device driver which adds support for new hardware
--> Support for a file system such as GFS2 or NFS
--> System calls
On modern systems, kernel modules are automatically loaded when needed. However, in some cases it is necessary to load or unload modules manually.

Kernel module dependencies
--------------------------
Certain kernel modules sometimes depend on one or more other kernel modules. The /lib/modules/<KERNEL_VERSION>/modules.dep file contains a complete list of kernel module dependencies for the respective kernel version.

The dependency file is generated by the depmod program, which is a part of the kmod package.

Listing currently loaded kernel modules
---------------------------------------
Prerequisites : The kmod package is installed.
Procedure : To list all currently loaded kernel modules, execute --> lsmod command
		In the lsmod command output,
			The first column provides the names of currently loaded modules.
			The second column displays the amount of memory per module in kilobytes.
			The last column shows the number, and optionally the names of modules that are dependent on a particular module.

Displaying information about kernel modules
------------------------------------------
modinfo <KERNEL_MODULE_NAME>
For example:
$ modinfo virtio_net

Loading kernel modules at system runtime
----------------------------------------
Procedure ::
------------
	1. Select a kernel module you want to load.
	   The modules are located in the /lib/modules/$(uname -r)/kernel/<SUBSYSTEM>/ directory.

	2. Load the relevant kernel module:

		# modprobe <MODULE_NAME>

Unloading kernel modules at system runtime
-----------------------------------------
1. Execute the lsmod command and select a kernel module you want to unload.
2. Unload the relevant kernel module:
	# modprobe -r <MODULE_NAME>

Loading kernel modules automatically at system boot time
--------------------------------------------------------
1. Select a kernel module you want to load during the boot process.
   The modules are located in the /lib/modules/$(uname -r)/kernel/<SUBSYSTEM>/ directory.

2. Create a configuration file for the module:
   # echo <MODULE_NAME> > /etc/modules-load.d/<MODULE_NAME>.conf

NOTE : 
When entering the name of a kernel module, do not append the .ko.xz extension to the end of the name. Kernel module names do not have extensions; their corresponding files do.

3. Optionally, after reboot, verify the relevant module was loaded:
   $ lsmod | grep <MODULE_NAME>

Preventing kernel modules from being automatically loaded at system boot time
-----------------------------------------------------------------------------
The following procedure describes how to add a kernel module to a blacklist so that it will not be automatically loaded during
the boot process.
1. Select a kernel module that you want to blacklist:
   $ lsmod
2. Create a blacklist configuration file:
   # vim /etc/modprobe.d/blacklist.conf
	# Blacklists <KERNEL_MODULE_1>
	blacklist <MODULE_NAME_1>
	install <MODULE_NAME_1> /bin/false

	# Blacklists <KERNEL_MODULE_2>
	blacklist <MODULE_NAME_2>
	install <MODULE_NAME_2> /bin/false

The blacklist line ensures that the relevant kernel module will not be automatically loaded during the boot process. The blacklist command, however, does not prevent the module from being loaded as a dependency for another kernel module that is not blacklisted. Therefore the install line causes the /bin/false to run instead of installing a module.

3. Create a backup copy of the current initial ramdisk image before rebuilding:
   # cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).bak.$(date +%m-%d-%H%M%S).img

4. Generate a new initial ramdisk image to reflect the changes:
   # dracut -f -v

5. Reboot the system:
     reboot


CONFIGURING KERNEL PARAMETERS AT RUNTIME
----------------------------------------
Kernel parameters are tunable values which you can adjust while the system is running. There is no requirement to reboot or recompile the kernel for changes to take effect.

It is possible to address the kernel parameters through:

The sysctl command
The virtual file system mounted at the /proc/sys/ directory
The configuration files in the /etc/sysctl.d/ directory


Centralized User Authentication
-------------------------------
Reference ==> https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/pdf/configuring_authentication_and_authorization_in_rhel/Red_Hat_Enterprise_Linux-8-Configuring_authentication_and_authorization_in_RHEL-en-US.pdf
